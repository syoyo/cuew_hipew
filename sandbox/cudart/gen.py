import json
import os, sys

def eval_expr(expr):
    s = ""

    if expr['kind'] == 'ConstantExpr':
        inner = expr['inner']
        assert len(inner) == 1

        s += eval_expr(inner[0])

    elif expr['kind'] == 'UnaryOperator':
        opcode = expr['opcode']

        assert len(expr['inner']) == 1
        assert opcode == '-'

        s += "{}{}".format(opcode, eval_expr(expr['inner'][0]))

    elif expr['kind'] == 'IntegerLiteral':

        s += expr['value']

    elif expr['kind'] == 'BinaryOperator':
        assert len(expr['inner']) == 2

        opcode = expr['opcode']

        s += "{} {} {}".format(eval_expr(expr['inner'][0]), opcode, eval_expr(expr['inner'][1]))

    else:
        print("eval_expr: TODO:", expr)
        raise

    return s


def enum_const_expr(expr):

    if expr['kind'] == 'ConstantExpr':
        s = eval_expr(expr)
        #print("expr:", s)
    else:
        # TODO: BinaryExpr(e.g. `1 << 2`)
        print("TODO", expr)
        raise

    return s

def emit_enum(item):
    name = item['name']

    decls = []
    for val in item['inner']:
        if val['kind'] != 'EnumConstantDecl':
            continue

        constant_name = val['name']
        #print("const name ", constant_name)

        assert val['type']['qualType'] == 'int'

        # has value?
        if 'inner' in val:
            exprs = val['inner']

            if isinstance(exprs, list):
                expr = list(filter(lambda x: x['kind'] == 'ConstantExpr', exprs))

                if len(expr) == 0:
                    # Enum without value

                    decls.append(constant_name)

                else:

                    # 'ConstantExpr' appears only once.
                    assert len(expr) == 1

                    value_expr = enum_const_expr(expr[0])

                    decls.append("{} = {}".format(constant_name, value_expr))
            else:
                expr = exprs
                assert expr['kind'] != "FullComment"
                enum_const_expr(expr)

        else:
            decls.append(constant_name)

    #print("enum decls", decls)

    # format
    # TODO: qualifier. e.g. __device_builtin__
    s = "enum {}\n".format(name)
    s += "{\n"
    s += ",\n".join(map(lambda x: "  " + x, decls)) # append whitespace indent
    s += "\n};"
    s += " // id {} \n".format(item['id'])

    return s

def emit_header():

    s = "// This file is automatically generated.\n"
    s += "#ifdef __cplusplus\n"
    s += "extern \"C\" {\n"
    s += "#endif\n"

    return s


def emit_footer():

    s = "\n"
    s += "#ifdef __cplusplus\n"
    s += "}\n"
    s += "#endif\n"

    return s


def main():

    input_filename = "cudart.json"

    if len(sys.argv) > 1:
        input_filename = sys.argv[1]

    j = json.loads(open(input_filename, 'r').read())

    ss = emit_header()

    inner = j['inner']
    for item in inner:
        s = ""

        if item['kind'] == "EnumDecl":
            s = emit_enum(item)

            ss += s
            ss += "\n"

        elif item['kind'] == "TypedefDecl":
            ignore_list = [
                "__int128",
                "__NSConstantString",
                "__builtin_ms_va_list",
                "__int128_t",
                "__uint128_t",
                "__builtin_va_list",
                "char1",
                "uchar1",
                "char2",
                "uchar2",
                "char3",
                "uchar3",
                "char4",
                "uchar4",
                "short1",
                "ushort1",
                "short2",
                "ushort2",
                "short3",
                "ushort3",
                "short4",
                "ushort4",
                "int1",
                "uint1",
                "int2",
                "uint2",
                "int3",
                "uint3",
                "int4",
                "uint4",
                "long1",
                "ulong1",
                "long2",
                "ulong2",
                "long3",
                "ulong3",
                "long4",
                "ulong4",
                "float1",
                "float2",
                "float3",
                "float4",
                "longlong1",
                "ulonglong1" ,
                "longlong2",
                "ulonglong2",
                "longlong3",
                "ulonglong3",
                "longlong4",
                "ulonglong4",
                "double1",
                "double2",
                "double3",
                "double4",
                "dim3",
                "ptrdiff_t",
                "size_t",
                "wchar_t",
                "max_align_t",
            ]

            if item['name'] in ignore_list:
                # skip
                continue

            # Assume corresponding EnumDecl has been emitted.
            if item['inner'][0]['kind'] == 'PointerType' and item['inner'][0]['inner'][0]['kind'] == "ParenType":
                # Guess function pointer. e.g. cudaStreamCallback_t
                funcproto = item['inner'][0]['inner'][0]['inner'][0]

                #print(funcproto['kind'])

                assert funcproto['kind'] == "FunctionProtoType"
                assert len(funcproto['inner']) > 1
                retty = funcproto['inner'][0]['type']['qualType']
                argtys = [x['type']['qualType'] for x in funcproto['inner'][1:]]
                #print("retty ", retty)
                #print("argtys ", argtys)

                args = ", ".join(argtys)
                s = "typedef {} (*{})({}); // id {} \n".format(retty, item['name'], args, item['id'])

            else:
                s = "typedef {} {}; // id {} \n".format(item['type']['qualType'], item['name'], item['id'])

            ss += s
            ss += "\n"

    ss += emit_footer()

    print(ss)

if __name__ == '__main__':
    main()
