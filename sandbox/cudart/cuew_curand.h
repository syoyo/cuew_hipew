// This file is automatically generated.
#ifndef CUEW_CURAND_H_
#define CUEW_CURAND_H_

#include <stdint.h>


#include <stddef.h>


#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif


#ifndef CUDAAPI
#ifdef _WIN32
#  define CUDAAPI __stdcall
#  define CUDA_CB __stdcall
#else
#  define CUDAAPI
#  define CUDA_CB
#endif
#endif

/*struct cudaChannelFormatDesc; */

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#pragma clang diagnostic ignored "-Wpadded"
#if __has_warning("-Wdocumentation-deprecated-sync")
  #pragma clang diagnostic ignored "-Wdocumentation-deprecated-sync"
#endif
#endif
#include "cuew_cudart.h"
#ifdef __clang__
#pragma clang diagnostic pop
#endif
enum curandStatus
{
  CURAND_STATUS_SUCCESS = 0,
  CURAND_STATUS_VERSION_MISMATCH = 100,
  CURAND_STATUS_NOT_INITIALIZED = 101,
  CURAND_STATUS_ALLOCATION_FAILED = 102,
  CURAND_STATUS_TYPE_ERROR = 103,
  CURAND_STATUS_OUT_OF_RANGE = 104,
  CURAND_STATUS_LENGTH_NOT_MULTIPLE = 105,
  CURAND_STATUS_DOUBLE_PRECISION_REQUIRED = 106,
  CURAND_STATUS_LAUNCH_FAILURE = 201,
  CURAND_STATUS_PREEXISTING_FAILURE = 202,
  CURAND_STATUS_INITIALIZATION_FAILED = 203,
  CURAND_STATUS_ARCH_MISMATCH = 204,
  CURAND_STATUS_INTERNAL_ERROR = 999
}; // id 0x1820098 

typedef enum curandStatus curandStatus_t; // id 0x1820ae0 

enum curandRngType
{
  CURAND_RNG_TEST = 0,
  CURAND_RNG_PSEUDO_DEFAULT = 100,
  CURAND_RNG_PSEUDO_XORWOW = 101,
  CURAND_RNG_PSEUDO_MRG32K3A = 121,
  CURAND_RNG_PSEUDO_MTGP32 = 141,
  CURAND_RNG_PSEUDO_MT19937 = 142,
  CURAND_RNG_PSEUDO_PHILOX4_32_10 = 161,
  CURAND_RNG_QUASI_DEFAULT = 200,
  CURAND_RNG_QUASI_SOBOL32 = 201,
  CURAND_RNG_QUASI_SCRAMBLED_SOBOL32 = 202,
  CURAND_RNG_QUASI_SOBOL64 = 203,
  CURAND_RNG_QUASI_SCRAMBLED_SOBOL64 = 204
}; // id 0x1820b98 

typedef enum curandRngType curandRngType_t; // id 0x1821500 

enum curandOrdering
{
  CURAND_ORDERING_PSEUDO_BEST = 100,
  CURAND_ORDERING_PSEUDO_DEFAULT = 101,
  CURAND_ORDERING_PSEUDO_SEEDED = 102,
  CURAND_ORDERING_PSEUDO_LEGACY = 103,
  CURAND_ORDERING_PSEUDO_DYNAMIC = 104,
  CURAND_ORDERING_QUASI_DEFAULT = 201
}; // id 0x18215b8 

typedef enum curandOrdering curandOrdering_t; // id 0x1824830 

enum curandDirectionVectorSet
{
  CURAND_DIRECTION_VECTORS_32_JOEKUO6 = 101,
  CURAND_SCRAMBLED_DIRECTION_VECTORS_32_JOEKUO6 = 102,
  CURAND_DIRECTION_VECTORS_64_JOEKUO6 = 103,
  CURAND_SCRAMBLED_DIRECTION_VECTORS_64_JOEKUO6 = 104
}; // id 0x18248e8 

typedef enum curandDirectionVectorSet curandDirectionVectorSet_t; // id 0x1824d00 

typedef unsigned int curandDirectionVectors32_t[32]; // id 0x1824e50 

typedef unsigned long long curandDirectionVectors64_t[64]; // id 0x1824fa0 

struct curandGenerator_st;
typedef struct curandGenerator_st * curandGenerator_t; // id 0x18251e0 

typedef double curandDistribution_st; // id 0x18252b0 

typedef curandDistribution_st * curandDistribution_t; // id 0x1825368 

struct curandDistributionShift_st;
typedef struct curandDistributionShift_st * curandDistributionShift_t; // id 0x1825520 

struct curandDistributionM2Shift_st;
typedef struct curandDistributionM2Shift_st * curandDistributionM2Shift_t; // id 0x1825720 

struct curandHistogramM2_st;
typedef struct curandHistogramM2_st * curandHistogramM2_t; // id 0x18258f0 

typedef unsigned int curandHistogramM2K_st; // id 0x1825978 

typedef curandHistogramM2K_st * curandHistogramM2K_t; // id 0x1825a28 

typedef curandDistribution_st curandHistogramM2V_st; // id 0x1825a90 

typedef curandHistogramM2V_st * curandHistogramM2V_t; // id 0x1825b48 

struct curandDiscreteDistribution_st;
typedef struct curandDiscreteDistribution_st * curandDiscreteDistribution_t; // id 0x1825d00 

enum curandMethod
{
  CURAND_CHOOSE_BEST = 0,
  CURAND_ITR = 1,
  CURAND_KNUTH = 2,
  CURAND_HITR = 3,
  CURAND_M1 = 4,
  CURAND_M2 = 5,
  CURAND_BINARY_SEARCH = 6,
  CURAND_DISCRETE_GAUSS = 7,
  CURAND_REJECTION = 8,
  CURAND_DEVICE_API = 9,
  CURAND_FAST_REJECTION = 10,
  CURAND_3RD = 11,
  CURAND_DEFINITION = 12,
  CURAND_POISSON = 13
}; // id 0x1825dd0 

typedef enum curandMethod curandMethod_t; // id 0x1827cd0 

typedef curandStatus_t  CUDAAPI tcurandCreateGenerator(curandGenerator_t *, curandRngType_t);
extern tcurandCreateGenerator *curandCreateGenerator;
typedef curandStatus_t  CUDAAPI tcurandCreateGeneratorHost(curandGenerator_t *, curandRngType_t);
extern tcurandCreateGeneratorHost *curandCreateGeneratorHost;
typedef curandStatus_t  CUDAAPI tcurandDestroyGenerator(curandGenerator_t);
extern tcurandDestroyGenerator *curandDestroyGenerator;
typedef curandStatus_t  CUDAAPI tcurandGetVersion(int *);
extern tcurandGetVersion *curandGetVersion;
typedef curandStatus_t  CUDAAPI tcurandGetProperty(libraryPropertyType, int *);
extern tcurandGetProperty *curandGetProperty;
typedef curandStatus_t  CUDAAPI tcurandSetStream(curandGenerator_t, cudaStream_t);
extern tcurandSetStream *curandSetStream;
typedef curandStatus_t  CUDAAPI tcurandSetPseudoRandomGeneratorSeed(curandGenerator_t, unsigned long long);
extern tcurandSetPseudoRandomGeneratorSeed *curandSetPseudoRandomGeneratorSeed;
typedef curandStatus_t  CUDAAPI tcurandSetGeneratorOffset(curandGenerator_t, unsigned long long);
extern tcurandSetGeneratorOffset *curandSetGeneratorOffset;
typedef curandStatus_t  CUDAAPI tcurandSetGeneratorOrdering(curandGenerator_t, curandOrdering_t);
extern tcurandSetGeneratorOrdering *curandSetGeneratorOrdering;
typedef curandStatus_t  CUDAAPI tcurandSetQuasiRandomGeneratorDimensions(curandGenerator_t, unsigned int);
extern tcurandSetQuasiRandomGeneratorDimensions *curandSetQuasiRandomGeneratorDimensions;
typedef curandStatus_t  CUDAAPI tcurandGenerate(curandGenerator_t, unsigned int *, size_t);
extern tcurandGenerate *curandGenerate;
typedef curandStatus_t  CUDAAPI tcurandGenerateLongLong(curandGenerator_t, unsigned long long *, size_t);
extern tcurandGenerateLongLong *curandGenerateLongLong;
typedef curandStatus_t  CUDAAPI tcurandGenerateUniform(curandGenerator_t, float *, size_t);
extern tcurandGenerateUniform *curandGenerateUniform;
typedef curandStatus_t  CUDAAPI tcurandGenerateUniformDouble(curandGenerator_t, double *, size_t);
extern tcurandGenerateUniformDouble *curandGenerateUniformDouble;
typedef curandStatus_t  CUDAAPI tcurandGenerateNormal(curandGenerator_t, float *, size_t, float, float);
extern tcurandGenerateNormal *curandGenerateNormal;
typedef curandStatus_t  CUDAAPI tcurandGenerateNormalDouble(curandGenerator_t, double *, size_t, double, double);
extern tcurandGenerateNormalDouble *curandGenerateNormalDouble;
typedef curandStatus_t  CUDAAPI tcurandGenerateLogNormal(curandGenerator_t, float *, size_t, float, float);
extern tcurandGenerateLogNormal *curandGenerateLogNormal;
typedef curandStatus_t  CUDAAPI tcurandGenerateLogNormalDouble(curandGenerator_t, double *, size_t, double, double);
extern tcurandGenerateLogNormalDouble *curandGenerateLogNormalDouble;
typedef curandStatus_t  CUDAAPI tcurandCreatePoissonDistribution(double, curandDiscreteDistribution_t *);
extern tcurandCreatePoissonDistribution *curandCreatePoissonDistribution;
typedef curandStatus_t  CUDAAPI tcurandDestroyDistribution(curandDiscreteDistribution_t);
extern tcurandDestroyDistribution *curandDestroyDistribution;
typedef curandStatus_t  CUDAAPI tcurandGeneratePoisson(curandGenerator_t, unsigned int *, size_t, double);
extern tcurandGeneratePoisson *curandGeneratePoisson;
typedef curandStatus_t  CUDAAPI tcurandGeneratePoissonMethod(curandGenerator_t, unsigned int *, size_t, double, curandMethod_t);
extern tcurandGeneratePoissonMethod *curandGeneratePoissonMethod;
typedef curandStatus_t  CUDAAPI tcurandGenerateBinomial(curandGenerator_t, unsigned int *, size_t, unsigned int, double);
extern tcurandGenerateBinomial *curandGenerateBinomial;
typedef curandStatus_t  CUDAAPI tcurandGenerateBinomialMethod(curandGenerator_t, unsigned int *, size_t, unsigned int, double, curandMethod_t);
extern tcurandGenerateBinomialMethod *curandGenerateBinomialMethod;
typedef curandStatus_t  CUDAAPI tcurandGenerateSeeds(curandGenerator_t);
extern tcurandGenerateSeeds *curandGenerateSeeds;
typedef curandStatus_t  CUDAAPI tcurandGetDirectionVectors32(curandDirectionVectors32_t **, curandDirectionVectorSet_t);
extern tcurandGetDirectionVectors32 *curandGetDirectionVectors32;
typedef curandStatus_t  CUDAAPI tcurandGetScrambleConstants32(unsigned int **);
extern tcurandGetScrambleConstants32 *curandGetScrambleConstants32;
typedef curandStatus_t  CUDAAPI tcurandGetDirectionVectors64(curandDirectionVectors64_t **, curandDirectionVectorSet_t);
extern tcurandGetDirectionVectors64 *curandGetDirectionVectors64;
typedef curandStatus_t  CUDAAPI tcurandGetScrambleConstants64(unsigned long long **);
extern tcurandGetScrambleConstants64 *curandGetScrambleConstants64;
extern int cuewInitCURAND(void);


#ifdef __cplusplus
}
#endif
#endif /* CUEW_CURAND_H_ */
