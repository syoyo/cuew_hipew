// This file is automatically generated.
#ifndef CUEW_CUFFT_H_
#define CUEW_CUFFT_H_

#include <stdint.h>


#include <stddef.h>


#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif


#ifndef CUDAAPI
#ifdef _WIN32
#  define CUDAAPI __stdcall
#  define CUDA_CB __stdcall
#else
#  define CUDAAPI
#  define CUDA_CB
#endif
#endif

/*struct cudaChannelFormatDesc; */

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#pragma clang diagnostic ignored "-Wpadded"
#if __has_warning("-Wdocumentation-deprecated-sync")
  #pragma clang diagnostic ignored "-Wdocumentation-deprecated-sync"
#endif
#endif
#include "cuew_cudart.h"
#include "cuComplex.h"
#ifdef __clang__
#pragma clang diagnostic pop
#endif
#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif

#include "library_types.h"

#ifdef __clang__
#pragma clang diagnostic pop
#endif
#endif
enum cufftResult_t
{
  CUFFT_SUCCESS = 0,
  CUFFT_INVALID_PLAN = 1,
  CUFFT_ALLOC_FAILED = 2,
  CUFFT_INVALID_TYPE = 3,
  CUFFT_INVALID_VALUE = 4,
  CUFFT_INTERNAL_ERROR = 5,
  CUFFT_EXEC_FAILED = 6,
  CUFFT_SETUP_FAILED = 7,
  CUFFT_INVALID_SIZE = 8,
  CUFFT_UNALIGNED_DATA = 9,
  CUFFT_INCOMPLETE_PARAMETER_LIST = 10,
  CUFFT_INVALID_DEVICE = 11,
  CUFFT_PARSE_ERROR = 12,
  CUFFT_NO_WORKSPACE = 13,
  CUFFT_NOT_IMPLEMENTED = 14,
  CUFFT_LICENSE_ERROR = 15,
  CUFFT_NOT_SUPPORTED = 16
}; // id 0x22ab218 

typedef enum cufftResult_t cufftResult; // id 0x22abc48 

typedef float cufftReal; // id 0x22abcd0 

typedef double cufftDoubleReal; // id 0x22abd40 

typedef cuComplex cufftComplex; // id 0x22abda8 

typedef cuDoubleComplex cufftDoubleComplex; // id 0x22abe10 

enum cufftType_t
{
  CUFFT_R2C = 42,
  CUFFT_C2R = 44,
  CUFFT_C2C = 41,
  CUFFT_D2Z = 106,
  CUFFT_Z2D = 108,
  CUFFT_Z2Z = 105
}; // id 0x22abe68 

typedef enum cufftType_t cufftType; // id 0x22ae2f8 

enum cufftCompatibility_t
{
  CUFFT_COMPATIBILITY_FFTW_PADDING = 1
}; // id 0x22ae368 

typedef enum cufftCompatibility_t cufftCompatibility; // id 0x22ae518 

typedef int cufftHandle; // id 0x22ae5a0 

typedef cufftResult  CUDAAPI tcufftPlan1d(cufftHandle *, int, cufftType, int);
extern tcufftPlan1d *cufftPlan1d;
typedef cufftResult  CUDAAPI tcufftPlan2d(cufftHandle *, int, int, cufftType);
extern tcufftPlan2d *cufftPlan2d;
typedef cufftResult  CUDAAPI tcufftPlan3d(cufftHandle *, int, int, int, cufftType);
extern tcufftPlan3d *cufftPlan3d;
typedef cufftResult  CUDAAPI tcufftPlanMany(cufftHandle *, int, int *, int *, int, int, int *, int, int, cufftType, int);
extern tcufftPlanMany *cufftPlanMany;
typedef cufftResult  CUDAAPI tcufftMakePlan1d(cufftHandle, int, cufftType, int, size_t *);
extern tcufftMakePlan1d *cufftMakePlan1d;
typedef cufftResult  CUDAAPI tcufftMakePlan2d(cufftHandle, int, int, cufftType, size_t *);
extern tcufftMakePlan2d *cufftMakePlan2d;
typedef cufftResult  CUDAAPI tcufftMakePlan3d(cufftHandle, int, int, int, cufftType, size_t *);
extern tcufftMakePlan3d *cufftMakePlan3d;
typedef cufftResult  CUDAAPI tcufftMakePlanMany(cufftHandle, int, int *, int *, int, int, int *, int, int, cufftType, int, size_t *);
extern tcufftMakePlanMany *cufftMakePlanMany;
typedef cufftResult  CUDAAPI tcufftMakePlanMany64(cufftHandle, int, long long *, long long *, long long, long long, long long *, long long, long long, cufftType, long long, size_t *);
extern tcufftMakePlanMany64 *cufftMakePlanMany64;
typedef cufftResult  CUDAAPI tcufftGetSizeMany64(cufftHandle, int, long long *, long long *, long long, long long, long long *, long long, long long, cufftType, long long, size_t *);
extern tcufftGetSizeMany64 *cufftGetSizeMany64;
typedef cufftResult  CUDAAPI tcufftEstimate1d(int, cufftType, int, size_t *);
extern tcufftEstimate1d *cufftEstimate1d;
typedef cufftResult  CUDAAPI tcufftEstimate2d(int, int, cufftType, size_t *);
extern tcufftEstimate2d *cufftEstimate2d;
typedef cufftResult  CUDAAPI tcufftEstimate3d(int, int, int, cufftType, size_t *);
extern tcufftEstimate3d *cufftEstimate3d;
typedef cufftResult  CUDAAPI tcufftEstimateMany(int, int *, int *, int, int, int *, int, int, cufftType, int, size_t *);
extern tcufftEstimateMany *cufftEstimateMany;
typedef cufftResult  CUDAAPI tcufftCreate(cufftHandle *);
extern tcufftCreate *cufftCreate;
typedef cufftResult  CUDAAPI tcufftGetSize1d(cufftHandle, int, cufftType, int, size_t *);
extern tcufftGetSize1d *cufftGetSize1d;
typedef cufftResult  CUDAAPI tcufftGetSize2d(cufftHandle, int, int, cufftType, size_t *);
extern tcufftGetSize2d *cufftGetSize2d;
typedef cufftResult  CUDAAPI tcufftGetSize3d(cufftHandle, int, int, int, cufftType, size_t *);
extern tcufftGetSize3d *cufftGetSize3d;
typedef cufftResult  CUDAAPI tcufftGetSizeMany(cufftHandle, int, int *, int *, int, int, int *, int, int, cufftType, int, size_t *);
extern tcufftGetSizeMany *cufftGetSizeMany;
typedef cufftResult  CUDAAPI tcufftGetSize(cufftHandle, size_t *);
extern tcufftGetSize *cufftGetSize;
typedef cufftResult  CUDAAPI tcufftSetWorkArea(cufftHandle, void *);
extern tcufftSetWorkArea *cufftSetWorkArea;
typedef cufftResult  CUDAAPI tcufftSetAutoAllocation(cufftHandle, int);
extern tcufftSetAutoAllocation *cufftSetAutoAllocation;
typedef cufftResult  CUDAAPI tcufftExecC2C(cufftHandle, cufftComplex *, cufftComplex *, int);
extern tcufftExecC2C *cufftExecC2C;
typedef cufftResult  CUDAAPI tcufftExecR2C(cufftHandle, cufftReal *, cufftComplex *);
extern tcufftExecR2C *cufftExecR2C;
typedef cufftResult  CUDAAPI tcufftExecC2R(cufftHandle, cufftComplex *, cufftReal *);
extern tcufftExecC2R *cufftExecC2R;
typedef cufftResult  CUDAAPI tcufftExecZ2Z(cufftHandle, cufftDoubleComplex *, cufftDoubleComplex *, int);
extern tcufftExecZ2Z *cufftExecZ2Z;
typedef cufftResult  CUDAAPI tcufftExecD2Z(cufftHandle, cufftDoubleReal *, cufftDoubleComplex *);
extern tcufftExecD2Z *cufftExecD2Z;
typedef cufftResult  CUDAAPI tcufftExecZ2D(cufftHandle, cufftDoubleComplex *, cufftDoubleReal *);
extern tcufftExecZ2D *cufftExecZ2D;
typedef cufftResult  CUDAAPI tcufftSetStream(cufftHandle, cudaStream_t);
extern tcufftSetStream *cufftSetStream;
typedef cufftResult  CUDAAPI tcufftDestroy(cufftHandle);
extern tcufftDestroy *cufftDestroy;
typedef cufftResult  CUDAAPI tcufftGetVersion(int *);
extern tcufftGetVersion *cufftGetVersion;
typedef cufftResult  CUDAAPI tcufftGetProperty(libraryPropertyType, int *);
extern tcufftGetProperty *cufftGetProperty;

/*
struct cudaChannelFormatDesc
{
    int                        x;
    int                        y;
    int                        z;
    int                        w;
    enum cudaChannelFormatKind f;
};
*/
extern int cuewInitCUFFT(void);


#ifdef __cplusplus
}
#endif
